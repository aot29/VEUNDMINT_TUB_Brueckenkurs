Eine vollständige Dokumentation als eBook gibt es auf http://git-scm.com/book/en/v2

Die wichtigsten git-Operationen:

Einfacher Workflow für einen Arbeitsgang:

   - Aktuelle Version holen (Linux: git pull, SourceTree: Pull-Button)
       
        - Falls andere Teilnehmer im branch gearbeitet haben wird git
          die Änderungen einarbeiten und verbinden (engl. merge).
          
        - Bei Konflikten meldet sich git und verweigert den pull-Vorgang,
          dann ist ein manueller merge erforderlich (bei DH oder Hiwi melden!)
          
   -  Arbeit an den lokalen Dateien vornehmen
   
   -  Arbeit lokal bei git registrieren
   
        - Linux: gitq zeigt gefundene Änderungen an, mit rechter Maustaste "commit" wählen
          und Dateien zur Registrierung wählen (grün = Datei ist neu im Ordner, rot = Datei gelöscht)
          und anklicken welche registriert werden sollen.

          Auf der Kommandozeile: git add <Dateien> (ggf. mehrfach), danach git commit
          
        - Sourcetree: Zeigt Änderungen im Branch an, hochzuladende Dateien auswählen und
          "Commit"-Button drücken
          
        git erfordert für jede Änderung einen Kommentar (kurze englische Beschreibung
        was gemacht wurde, Dokument- und Autornamen gehören da nicht rein)
        
        - Änderungen sollten feinkörnig registriert werden, auf keinen Fall sollten
          Änderungen an mehreren Modulen in einen commit gepackt werden.
        
   -  Änderungen zum Server hochladen: git push auf der Konsole oder "push"-Button
          
        - Falls andere Teilnehmer seit dem letzten Pull im branch gearbeitet
          haben wird git die Änderungen einarbeiten und verbinden (engl. merge).
          
        - Bei Konflikten meldet sich git und verweigert den push-Vorgang,
          dann ist ein manueller merge erforderlich (bei DH oder Hiwi melden!)
          
WICHTIG: git meckert nicht wenn etwas nicht gepusht wurde, oder wenn etwas nicht registriert und
dann beim push nicht mitgeschickt wurde. Mit "git status" (auf der Linux-Konsole oder dem SourceTree-Terminal)
kann man git fragen, welche Dateien gerade nicht registriert sind (engl. untracked).
Manche Dateien (z.B. die pdf-files oder aux-files in den Modulordnern) möchte man auch gar nicht registrieren.

ERGÄNZUNG: "git status" ist eigentlich nicht dafür gedacht Dateien anzuzeigen, die man dauerhaft nicht registrieren möchte. Um die Ausgabe von "git status" möglichst sauber und übersichtlich zu halten ist es empfehlenswert git mitzuteilen solche Dateien dauerhaft zu ignorieren. Dies geschieht am einfachsten durch einen Eintrag in die Datei ve-und-mint/.git/info/exclude. Beispiel: die Zeile module_veundmint/VBKM09/vbkm09.pdf in dieser Datei teilt git mit die PDF-Datei vbkm09.pdf in dem entsprechenden Pfad dauerhaft zu ignorieren. 



Den genutzten Zweig (branch) wechseln:

Linux oder SourceTree-Terminal: git checkout <neuer Branch>

Windows/SourceTree: Gewünschten Branch in Branchliste (Mitte des Fensters) doppelklicken
                    Falls noch nicht lokal vorhanden: "Checkout"-Button -> Neuen Branch
                    -> Im Remote-Aufklapper den gewünschten Branch wählen
                    
WICHTIG: Arbeit im aktuellen Branch vorher abschließen und pushen, sonst Datenverlust!

ERGÄNZUNG: Manchmal ist es sinnvoll, den branch ohne Datenverlust wechseln zu können ohne vorher alle Änderungen auf den Server pushen zu müssen. Dafür gibt es den Befehl "git stash". Dieser speichert die momentanen Änderungen zwischen und man kann den branch wechseln ohne, dass die Daten verloren gehen. Nach der Rückkehr in den branch mit den zwischengespeicherten Daten führt man den Befehl "git stash pop" aus und kann die Arbeit an der gleichen Stelle fortsetzen. 

pull / push beziehen sich immer nur auf einen einzigen branch.

