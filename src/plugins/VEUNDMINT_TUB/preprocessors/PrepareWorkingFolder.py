import re
import os.path
import subprocess
import fileinput
from tex2x.AbstractPreprocessor import AbstractPreprocessor
from tex2x.Settings import ve_settings as settings
from tex2x.System import ve_system as sys

class PrepareWorkingFolder(AbstractPreprocessor):
	
	def __init__(self, data):
		
		# copy interface member references
		self.data = data


	# main function to be called from tex2x
	def preprocess(self):
		"""
		Start preprocessor.
		Called from dispatcher.
		"""		
		self.prepareWorkingFolder()
		self.createCopyrightTextFile()
		self.createMacrosAndStyles()
		self.initializeCourseVariant()
		self.createMainTexFile()

	def prepareWorkingFolder(self):
		# Prepare working folder
		sys.emptyTree(settings.sourcepath)
		sys.copyFiletree(settings.texCommonFiles, settings.sourceTEX, ".")
		sys.copyFiletree(settings.sourcepath_original, settings.sourceTEX, ".")
		sys.timestamp("Source and common tex files copied")
		if os.path.isfile(settings.sourceTEXStartFile):
			sys.message(sys.VERBOSEINFO, "Found main tex file " + settings.sourceTEXStartFile)
		else:
			sys.message(sys.FATALERROR, "Main tex file " + settings.sourceTEXStartFile + " not present in original source folder " + settings.sourcepath_original)

	def createCopyrightTextFile(self):		
		# Create copyright text file and exercise export
		self.data['copyrightcollection'] = self.data['copyrightcollection'] + "\\begin{tabular}{llll}%\n" + self.copyrightcollection + "\\end{tabular}\n"
		sys.writeTextFile(settings.copyrightFile, "% autogenerated by the tex2x VEUNDMINT plugin\n% do not modify\n" + self.data['copyrightcollection'], settings.stdencoding)
		self.data['directexercises'] = self.data['directexercises'] + self.directexercises
		sys.writeTextFile(settings.directexercisesFile, "% autogenerated by the tex2x VEUNDMINT plugin\n% do not modify\n" + self.data['directexercises'], settings.stdencoding)

	def createMacrosAndStyles(self):
		# create macro and style files used for pdflatex and ttm processing
		sys.pushdir()
		os.chdir(settings.sourceTEX)
		self._installPackages()
		sys.popdir()
		
	def initializeCourseVariant(self):
		# initialize course variant data
		self.variant = settings.variant
		sys.message(sys.CLIENTINFO, "Preprocessor uses course variant " + self.variant)
		# modify macro package to variant (as a variable, not a file yet)
		(self.data['modmacrotex'], k) = re.subn(r"\\variantstdtrue", "\\\\variant" + self.variant + "true % this string was added by tex2x VEUNDMINT preprocessor\n", self.data['modmacrotex'], 0, re.S)
		if (k == 1):
			sys.message(sys.VERBOSEINFO, "Preparing $macrofile for variant " + self.variant)
		else:
			sys.message(sys.CLIENTERROR, "Variant selection statement \\variantstdtrue found " + str(k) + " times in macro file")
			
	def	createMainTexFile(self):	
		# Create main file for HTML build, oh great line separator for python is the backslash
		# \author and \title MUST NOT appear in the tex source, they generate h1 and h3 tags through ttm which confuse xml dissection
		maintex = "% this file was generated by tex2x VEUNDMINT preprocessor, do not modify!\n" \
				 + "\\documentclass{book}\n" \
				 + "\\input{" + settings.macrofile + "} % variant " + self.variant + "\n" \
				 + "\\newcounter{MChaptersGiven}\\setcounter{MChaptersGiven}{1}\n" \
				 + "\\begin{document}\n" \
				 + "\\begin{html}<!-- variant;\\end{html}\\MVariant\\begin{html} //-->\\end{html}\n" \
				 + sys.readTextFile(settings.sourceTEXStartFile, settings.stdencoding) + "\n" \
				 + "\\end{document}\n"
		sys.writeTextFile(settings.sourceTEXStartFile, maintex, settings.stdencoding)
		sys.message(sys.VERBOSEINFO, "Generated main tex file for HTML conversion: " + settings.sourceTEXStartFile)
	
