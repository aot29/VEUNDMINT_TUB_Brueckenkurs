# Update the texts in develop_software to the version in develop_content
# This will overwrite texts without consideration for the file's history
# Why? Because the two branches are wildly out of sync so texts can be cherry-picked only.
#
# But: git status shows the updated chapters.
#
# Using GNU Make, invoke as:
#
# cd <VEUNDMINT checkout path>
# make -f tools/makefiles/updatetexts
#

.DEFAULT_GOAL := all

# The folder where the texts will be checked out
# Change this to suit your OS
TMP_DIR = /tmp

CHAPTERS = 01 02 03 04 05 06 07 08 09 10

# Declare as phony so targets will run even if there's a file by that name
.PHONY: cleanup getLatestContent cp2tmp getLatestSoftware cp2vbkm all


#
# Checkout the latest version of the texts from git
# This will abort if there are uncommited changes.
#
getLatestContent:
	# checkout the content branch
	git checkout develop_content
	# git pull will ask for the passphrase
	git pull
	

#
# Checkout the latest version of the software from git
# This will abort if there are uncommited changes.
#
getLatestSoftware:
	# checkout the software branch
	git checkout develop_software
	# git pull will ask for the passphrase
	git pull


#
# Copy all language versions of a chapter to a temp folder
# Note: this works with GNU cp, but not with OSX cp because of --parents
#
define cp2tmp_cmd
	# cp chapter ${CURRENT_CHAPTER}
	-cd module_veundmint && cp --parents VBKM${CURRENT_CHAPTER}/vbkm${CURRENT_CHAPTER}.tex ${TMP_DIR}
	-cd module_veundmint && cp --parents VBKM${CURRENT_CHAPTER}/vbkm${CURRENT_CHAPTER}_eng.tex ${TMP_DIR}
endef


#
#copy the chapter files to a temporary folder
#
cp2tmp:
	$(foreach var, ${CHAPTERS}, $(eval CURRENT_CHAPTER := ${var}) $(cp2tmp_cmd) )

	# copy testpaket
	-cd module_veundmint && cp --parents VBKMTestpaketKIT/vbkmtestpaketkit1.tex ${TMP_DIR}
	-cd module_veundmint && cp --parents VBKMTestpaketKIT/vbkmtestpaketkit1_eng.tex ${TMP_DIR}

#
# Copy all language versions of a chapter from the temp folder to module_veundmint
#
define cp2vbkm_cmd
	# cp chapter ${CURRENT_CHAPTER}
	-cp ${TMP_DIR}/VBKM${CURRENT_CHAPTER}/vbkm${CURRENT_CHAPTER}.tex module_veundmint/VBKM${CURRENT_CHAPTER}
	-cp ${TMP_DIR}/VBKM${CURRENT_CHAPTER}/vbkm${CURRENT_CHAPTER}_eng.tex module_veundmint/VBKM${CURRENT_CHAPTER}
	
	# copy testpaket
	-cp ${TMP_DIR}/VBKMTestpaketKIT/vbkmtestpaketkit1.tex module_veundmint/VBKMTestpaketKIT
	-cp ${TMP_DIR}/VBKMTestpaketKIT/vbkmtestpaketkit1_eng.tex module_veundmint/VBKMTestpaketKIT
endef


#
#copy the files from the temporary folder to the chapter location
#
cp2vbkm:
	$(foreach var, ${CHAPTERS}, $(eval CURRENT_CHAPTER := ${var}) $(cp2vbkm_cmd) )


#
# Delete temporary files
#
cleanup:
	-rm -Rf ${TMP_DIR}/VBKM*


#
# Build and deploy the nightly build
#
all: |cleanup getLatestContent cp2tmp getLatestSoftware cp2vbkm cleanup
	echo "Texts updated."


