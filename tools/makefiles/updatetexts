# Update the texts in develop_software to the version in develop_content
# This will overwrite texts without consideration for the file's history
# Why? Because the two branches are wildly out of sync so texts can be cherry-picked only.
#
# But: git status shows the updated chapters.
#
# Using GNU Make, invoke as:
#
# cd <VEUNDMINT checkout path>
# make -f tools/makefiles/updatetexts
#

.DEFAULT_GOAL := all

# The folder where the texts will be checked out
# Change this to suit your OS
TMP_DIR = /tmp

CHAPTERS = 01 02 03 04 05 06 07 08 09 10

# Declare as phony so targets will run even if there's a file by that name
.PHONY: cleanup getLatestContent cp2tmp getLatestSoftware cp2vbkm convert2utf8 all

#
# Get latest texts from develop_content and insert them in develop_software
#
all: |cleanup getLatestContent cp2tmp getLatestSoftware cp2vbkm convert2utf8 cleanup
	echo "Texts updated."


#
# Checkout the latest version of the texts from git
# This will abort if there are uncommited changes.
#
getLatestContent:
	# checkout the content branch
	git checkout develop_content
	# git pull will ask for the passphrase
	git pull
	

#
# Checkout the latest version of the software from git
# This will abort if there are uncommited changes.
#
getLatestSoftware:
	# checkout the software branch
	git checkout develop_software
	# git pull will ask for the passphrase
	git pull


#
# Copy all language versions of a chapter to a temp folder
# Note: this works with GNU cp, but not with OSX cp because of --parents
#
define cp2tmp_cmd
	# cp chapter ${CURRENT_CHAPTER}
	-cd module_veundmint && cp --parents VBKM${CURRENT_CHAPTER}/vbkm${CURRENT_CHAPTER}.tex ${TMP_DIR}
	-cd module_veundmint && cp --parents VBKM${CURRENT_CHAPTER}/vbkm${CURRENT_CHAPTER}_eng.tex ${TMP_DIR}
endef


#
#copy the chapter, stochastics and test files to a temporary folder
#
cp2tmp:
	# copy chapters
	$(foreach var, ${CHAPTERS}, $(eval CURRENT_CHAPTER := ${var}) $(cp2tmp_cmd) )

	# copy stochastics
	-cd module_veundmint && cp --parents VBKM_Stochastik/vbkm_stochastik.tex ${TMP_DIR}
	-cd module_veundmint && cp --parents VBKM_Stochastik/vbkm_stochastik_eng.tex ${TMP_DIR}
	
	# copy testpaket
	-cd module_veundmint && cp --parents VBKMTestpaketKIT/vbkmtestpaketkit1.tex ${TMP_DIR}
	-cd module_veundmint && cp --parents VBKMTestpaketKIT/vbkmtestpaketkit1_eng.tex ${TMP_DIR}


#
# Copy all language versions of a chapter from the temp folder to module_veundmint
#
define cp2vbkm_cmd
	# cp chapter ${CURRENT_CHAPTER}
	-cp ${TMP_DIR}/VBKM${CURRENT_CHAPTER}/vbkm${CURRENT_CHAPTER}.tex module_veundmint/VBKM${CURRENT_CHAPTER}
	-cp ${TMP_DIR}/VBKM${CURRENT_CHAPTER}/vbkm${CURRENT_CHAPTER}_eng.tex module_veundmint/VBKM${CURRENT_CHAPTER}
	
endef


#
#copy the files from the temporary folder to the chapter location
#
cp2vbkm:
	# copy chapters
	$(foreach var, ${CHAPTERS}, $(eval CURRENT_CHAPTER := ${var}) $(cp2vbkm_cmd) )

	# copy stochastics
	-cp ${TMP_DIR}/VBKM_Stochastik/vbkm_stochastik.tex module_veundmint/VBKM_Stochastik
	-cp ${TMP_DIR}/VBKM_Stochastik/vbkm_stochastik_eng.tex module_veundmint/VBKM_Stochastik
	
	# copy testpaket
	-cp ${TMP_DIR}/VBKMTestpaketKIT/vbkmtestpaketkit1.tex module_veundmint/VBKMTestpaketKIT
	-cp ${TMP_DIR}/VBKMTestpaketKIT/vbkmtestpaketkit1_eng.tex module_veundmint/VBKMTestpaketKIT


#
# Convert texts to utf-8 
#
convert2utf8:
	# convert German texts
	$(foreach var, ${CHAPTERS}, $(eval CURRENT_CHAPTER := module_veundmint/VBKM${var}/vbkm${var}.tex) $(convert2utf8_cmd) )
	$(foreach var, ${CHAPTERS}, $(eval CURRENT_CHAPTER := module_veundmint/VBKM${var}/vbkm${var}.tex) $(correctUmlauts_cmd) )
	
	# convert English texts
	$(foreach var, ${CHAPTERS}, $(eval CURRENT_CHAPTER := module_veundmint/VBKM${var}/vbkm${var}_eng.tex) $(convert2utf8_cmd) )
	$(foreach var, ${CHAPTERS}, $(eval CURRENT_CHAPTER := module_veundmint/VBKM${var}/vbkm${var}_eng.tex) $(correctUmlauts_cmd) )

	# stochastik	
	$(eval CURRENT_CHAPTER := module_veundmint/VBKM_Stochastik/vbkm_stochastik.tex)
	$(convert2utf8_cmd)
	$(correctUmlauts_cmd)
	$(eval CURRENT_CHAPTER := module_veundmint/VBKM_Stochastik/vbkm_stochastik_eng.tex)
	$(convert2utf8_cmd)
	$(correctUmlauts_cmd)
	
	# testpaket
	$(eval CURRENT_CHAPTER := module_veundmint/VBKMTestpaketKIT/vbkmtestpaketkit1.tex)
	$(convert2utf8_cmd)
	$(correctUmlauts_cmd)
	$(eval CURRENT_CHAPTER := module_veundmint/VBKMTestpaketKIT/vbkmtestpaketkit1_eng.tex)
	$(convert2utf8_cmd)
	$(correctUmlauts_cmd)

	# mintmod
	$(eval CURRENT_CHAPTER := src/tex/deutsch.tex)
	$(convert2utf8_cmd)
	$(correctUmlauts_cmd)
	$(eval CURRENT_CHAPTER := src/tex/english.tex)
	$(convert2utf8_cmd)
	$(correctUmlauts_cmd)


#
# first check if text is in iso, then convert to utf-8
#
define convert2utf8_cmd
$(if $(filter $(shell file -i ${CURRENT_CHAPTER} | grep -o 'iso-8859-1'), iso-8859-1),
iconv -f ISO-8859-15 -t UTF-8 ${CURRENT_CHAPTER} > out.tex && mv out.tex ${CURRENT_CHAPTER} && echo ${CURRENT_CHAPTER} converted to utf-8,
echo "${CURRENT_CHAPTER} no conversion to utf-8" )
endef


#
# Correct umlauts
# example: "u doesn't seem to be correct LaTeX (\"u is correct). Replace by utf-8 characters.
# Kommentare werden nicht geaendert
#
define correctUmlauts_cmd
	$(shell sed -i "s|\"a|ä|g" ${CURRENT_CHAPTER} )
	$(shell sed -i "s|\\\ä|ä|g" ${CURRENT_CHAPTER} )
	$(shell sed -i "s|\"A|Ä|g" ${CURRENT_CHAPTER} )
	$(shell sed -i "s|\\\Ä|Ä|g" ${CURRENT_CHAPTER} )
	
	$(shell sed -i "s|\"o|ö|g" ${CURRENT_CHAPTER} )
	$(shell sed -i "s|\\\ö|ö|g" ${CURRENT_CHAPTER} )
	$(shell sed -i "s|\"O|Ö|g" ${CURRENT_CHAPTER} )
	$(shell sed -i "s|\\\Ö|Ö|g" ${CURRENT_CHAPTER} )
	
	$(shell sed -i "s|\"u|ü|g" ${CURRENT_CHAPTER} )
	$(shell sed -i "s|\\\ü|ü|g" ${CURRENT_CHAPTER} )
	$(shell sed -i "s|\"U|Ü|g" ${CURRENT_CHAPTER} )
	$(shell sed -i "s|\\\Ü|Ü|g" ${CURRENT_CHAPTER} )
	
	$(shell sed -i "s|\"s|ß|g" ${CURRENT_CHAPTER} )
	$(shell sed -i "s|\\\ß|ß|g" ${CURRENT_CHAPTER} )
endef


#
# Delete temporary files
#
cleanup:
	-rm -Rf ${TMP_DIR}/VBKM*




