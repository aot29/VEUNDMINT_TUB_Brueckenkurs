# Builds the multi-language version
#
# This file is here for 2 reasons:
# 1. This could be implemented in Python, but in the present stage of development,
# it would be unwise to add the extra layer of complexity.
#
# 2. Some form of automation is necessary to setup the continuous integration server
#
# Caveats:
# * Remember to always use tabs instead of spaces!
# Specially when doing copy+paste, tabs will sometimes be replaced by spaces.
# Make will then throw a "missing separator" error.
# * This script should work on any Unix system, but the result should be cross-plattform,
# so specifically don't use softlinks (ln -s is bad).
#
# Using GNU Make, invoke as:
#
# cd <VEUNDMINT checkout path>
# make -f tools/makefiles/multilang
#

.DEFAULT_GOAL := allTUB

# Path to source dir, relative to <VEUNDMINT checkout path>
BASEDIR = src

# Name of the output dir to be created
OUTPUT = build
SOURCE=content_submodule/content
# Language the index.html will point to by default,
# possible values: de, en
DEFAULT_LANG = de

# Declare as phony so targets will run even if there's a file by that name
.PHONY: cleanupBefore convert_with_pdf convert_without_pdf merge fixlinks fixredirects cleanupAfter all movePDF


#
# Build everything for the bootstrap version
# Including PDFs
#
allTUB: |cleanupBefore convert_with_pdf merge fixRedirects fix fixSpecialPages startGulp movePDF cleanupAfter
	echo "ready"


#
# Build everything for the bootstrap version
# WITHOUT PDFs
#
nopdf: |cleanupBefore convert_without_pdf merge fixRedirects fix fixSpecialPages startGulp cleanupAfter
	echo "ready"


#
# Don#t use this target. Checkout the legacy branch instead
# Build everything for the non-bootstrap version
#
#allKIT: |cleanup convert merge fixRedirects fix startGulp
#	echo "ready"


#
# Use the converter to build the version specified by CURRENT_LANG
#
define convert_cmd
	# prefixed with "-" to ignore converter errors
	# now converting, don't worry about converter errors. This can take a while...
	-cd $(BASEDIR) && python3 tex2x.py VEUNDMINT lang=$(CURRENT_LANG) output=$(OUTPUT)_$(CURRENT_LANG) ${OVERRIDE} 
endef


#
# Deploy all images and videos to the images directory
#
define deploy_img_cmd
	# copy all math images
	find ${SOURCE}/ -iname \*.png -print0 | xargs -I{} -0 cp {} $(OUTPUT)/images
	# copy logos
	find src/files/images/ -iname logo_\*.png -print0 | xargs -I{} -0 cp {} $(OUTPUT)/images
	# copy additional images
	cp src/files/images/cclbysa.png $(OUTPUT)/images
	cp src/files/images/tbeispiel.png $(OUTPUT)/images
	# copy autogenerated images
	find autogenerated/ -iname \*.png -print0 | xargs -I{} -0 cp {} $(OUTPUT)/images
	# copy all videos
	find ${SOURCE}/ -iname \*.mp4 -print0 | xargs -I{} -0 cp {} $(OUTPUT)/images
endef


#
# Generate PDF of whole course
# @see: https://gitlab.tubit.tu-berlin.de/stefan.born/VEUNDMINT_TUB_Brueckenkurs/wikis/pdf
#
define pdf_cmd
	# now building PDFs, this can take a while...
	cd _tmp/tex && pdflatex -interaction nonstopmode -halt-on-error -file-line-error veundmint_$(CURRENT_LANG).tex >> convert.log
	cd _tmp/tex && makeindex  -q veundmint_$(CURRENT_LANG)
	cd _tmp/tex && pdflatex -interaction nonstopmode -halt-on-error -file-line-error veundmint_$(CURRENT_LANG).tex >> convert.log
	-mkdir $(OUTPUT)_$(CURRENT_LANG)/pdf
	cp _tmp/tex/veundmint_$(CURRENT_LANG).pdf $(OUTPUT)_$(CURRENT_LANG)/pdf/
endef


#
# Build the English and the German version.
# including PDFs of whole course
#
convert_with_pdf:
	# set CURRENT_LANG at runtime.
	$(eval CURRENT_LANG := de)
	$(convert_cmd)
	$(pdf_cmd)
	$(eval CURRENT_LANG := en)
	$(convert_cmd)
	$(pdf_cmd)


#
# Build the English and the German version.
#
convert_without_pdf:
	# set CURRENT_LANG at runtime.
	$(eval CURRENT_LANG := de)
	$(convert_cmd)
	$(eval CURRENT_LANG := en)
	$(convert_cmd)


#
# set CURRENT_LANG at runtime.
# Build DE language version
#
de: cleanup
	$(eval CURRENT_LANG := de)
	$(convert_cmd)
	mv $(OUTPUT)_$(CURRENT_LANG) $(OUTPUT)
	$(deploy_img_cmd)


#
# set CURRENT_LANG at runtime.
# Build EN language version
#
en: cleanup
	$(eval CURRENT_LANG := en)
	$(convert_cmd)
	mv $(OUTPUT)_$(CURRENT_LANG) $(OUTPUT)
	$(deploy_img_cmd)


#
# Merge the 2 versions together.
#
merge:
	mv $(OUTPUT)_de $(OUTPUT)

	# move German HTML from /html to /html/de
	mv $(OUTPUT)/html $(OUTPUT)/de
	mkdir $(OUTPUT)/html
	mv $(OUTPUT)/de $(OUTPUT)/html

	# move English HTML to /html/en
	mv $(OUTPUT)_en/html $(OUTPUT)/html/en

	# move English PDF
	-mv $(OUTPUT)_en/pdf/* $(OUTPUT)/pdf/

	$(deploy_img_cmd)


#
# Don't use Unix softlinks here (ln -s),
# as the output should also work on non-Unixes.
#
define fixRedirects_cmd
	# copy HTML-redirects to each language version
	cd $(OUTPUT) && cp *.html html/$(CURRENT_LANG)
endef


#
# Copy redirect pages to each html/language directory
# Moved to its own target, to make sure it is done
# Before serach and replace starts in "fix" target.
#
fixRedirects:
	# set CURRENT_LANG to de
	$(eval CURRENT_LANG := de)
	$(fixRedirects_cmd)

	# set CURRENT_LANG to en
	$(eval CURRENT_LANG := en)
	$(fixRedirects_cmd)


# Move special pages to their definitive location.
# This should be dealt with in mintmod
define fixSpecialPages_cmd
	# Remove the single-language special pages	
	-rm $(OUTPUT)/html/$(CURRENT_LANG)/data.html
	-rm $(OUTPUT)/html/$(CURRENT_LANG)/signup.html
	-rm $(OUTPUT)/html/$(CURRENT_LANG)/login.html
	-rm $(OUTPUT)/html/$(CURRENT_LANG)/logout.html
	-rm $(OUTPUT)/html/$(CURRENT_LANG)/search.html
	-rm $(OUTPUT)/html/$(CURRENT_LANG)/favorites.html
	-rm $(OUTPUT)/html/$(CURRENT_LANG)/test.html

	# Move special pages to their definitive location (for the current language)
	-cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -name '*.html' -type f -print | xargs grep '<!-- mdeclaresiteuxidpost;;VBKM_MISCCOURSEDATA;; //-->' -l | xargs -I '{}' cp '{}' data.html
	-cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -name '*.html' -type f -print | xargs grep '<!-- mdeclaresiteuxidpost;;VBKM_MISCSETTINGS;; //-->' -l | xargs -I '{}' cp '{}' signup.html
	-cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -name '*.html' -type f -print | xargs grep '<!-- mdeclaresiteuxidpost;;VBKM_MISCLOGIN;; //-->' -l | xargs -I '{}' cp '{}' login.html
	-cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -name '*.html' -type f -print | xargs grep '<!-- mdeclaresiteuxidpost;;VBKM_MISCLOGOUT;; //-->' -l | xargs -I '{}' cp '{}' logout.html
	-cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -name '*.html' -type f -print | xargs grep '<!-- mdeclaresiteuxidpost;;VBKM_MISCSEARCH;; //-->' -l | xargs -I '{}' cp '{}' search.html
	-cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -name '*.html' -type f -print | xargs grep '<!-- mdeclaresiteuxidpost;;VBKM_MISCFAVORITES;; //-->' -l | xargs -I '{}' cp '{}' favorites.html
	-cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -name '*.html' -type f -print | xargs grep '<!-- mdeclaresiteuxidpost;;VBKMT_START;; //-->' -l | xargs -I '{}' cp '{}' test.html

	#now correct the links
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -maxdepth 1 -name '*.html' -type f -exec sed -i "s|href=\".*#L_CONFIG|href=\"\.\./$(CURRENT_LANG)/signup.html|g" {} \;
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -maxdepth 1 -name '*.html' -type f -exec sed -i "s|href=\".*#L_CDATA|href=\"\.\./$(CURRENT_LANG)/data.html|g" {} \;
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -maxdepth 1 -name '*.html' -type f -exec sed -i "s|href=\".*#L_LOGIN|href=\"\.\./$(CURRENT_LANG)/login.html|g" {} \;
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -maxdepth 1 -name '*.html' -type f -exec sed -i "s|href=\".*#L_LOGOUT|href=\"\.\./$(CURRENT_LANG)/logout.html|g" {} \;
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -maxdepth 1 -name '*.html' -type f -exec sed -i "s|href=\".*#L_SEARCHSITE|href=\"\.\./$(CURRENT_LANG)/search.html|g" {} \;
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -maxdepth 1 -name '*.html' -type f -exec sed -i "s|href=\".*#L_FAVORITESSITE|href=\"\.\./$(CURRENT_LANG)/favorites.html|g" {} \;
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -maxdepth 1 -name '*.html' -type f -exec sed -i "s|href=\".*#L_TEST01START|href=\"\.\./$(CURRENT_LANG)/test.html|g" {} \;

	# fix links in search page
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -maxdepth 1 -name 'search.html' -type f -exec sed -i "s|href=\"html/|href=\"|g" {} \;
endef


#
# Move special pages to their definitive location
# this will overwrite some but not all redirect pages
#
fixSpecialPages:
	# set CURRENT_LANG to de
	$(eval CURRENT_LANG := de)
	$(fixSpecialPages_cmd)

	# set CURRENT_LANG to en
	$(eval CURRENT_LANG := en)
	$(fixSpecialPages_cmd)


#
# Fix the links using shell commands.
# Don't use Unix softlinks here (ln -s),
# as the output should also work on non-Unixes.
#
define fixLinks_cmd
	# copy HTML-redirects to each language version
	cd $(OUTPUT) && cp *.html html/$(CURRENT_LANG)

	# fix links to HTML pages
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -name '*.html' -type f -exec sed -i "s|href=\"\.\./html|href=\"\.\./$(CURRENT_LANG)|g" {} \;
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -name '*.html' -type f -exec sed -i "s|href=\"\.\./\.\./html|href=\"\.\./\.\./$(CURRENT_LANG)|g" {} \;

	# fix link in redirects (-maxdepth 1 is important here)
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -maxdepth 1 -name '*.html' -type f -exec sed -i "s|url=html/|url=|g" {} \;
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -maxdepth 1 -name '*.html' -type f -exec sed -i "s|window\.location\.href = \"html/|window\.location\.href = \"|g" {} \;
	cd $(OUTPUT)/html/$(CURRENT_LANG) && find . -maxdepth 1 -name '*.html' -type f -exec sed -i "s|href=\"html/|href=\"|g" {} \;

endef


#
# Fix the link paths in the HTML files
#
fix: fixRedirects
	# fix links to videos
	cd $(OUTPUT)/html && find . -name '*.html' -type f -exec sed -i "s|:localmaterial:|\.\./\.\./\.\./images|g" {} \;
	
	# set CURRENT_LANG to de
	$(eval CURRENT_LANG := de)
	$(fixLinks_cmd)

	# set CURRENT_LANG to en
	$(eval CURRENT_LANG := en)
	$(fixLinks_cmd)

	# replace index.html with src/templates_xslt/html5_choose_language_simple.html to allow for choosing en or de version
	cp src/templates_xslt/html5_choose_language_simple.html $(OUTPUT)/index.html


useScormIndex:
	# replace public/index.html with src/templates_xslt/html5_redirect_moodle
	cp src/templates_xslt/html5_redirect_moodle.html public/index.html


#
# Cleanup before starting a new build
#
cleanupBefore:
	-rm -Rf $(OUTPUT)
	-rm -Rf $(OUTPUT)_en
	-rm -Rf $(OUTPUT)_de
	-rm -Rf _tmp
	-rm -Rf public


#
# Cleanup after a build is ready
#
cleanupAfter:
	-rm -Rf $(OUTPUT)
	-rm -Rf $(OUTPUT)_en
	-rm -Rf $(OUTPUT)_de
#	-rm -Rf _tmp


#
# starts gulp to produce dist version version if gulp command is found
# echo instruction how to proceed otherwise
#
startGulp:
	# running gulp and copying to /public
	@type npm >/dev/null 2>&1 && npm run gulp >/dev/null 2>&1 ||echo "npm does not exist. You need to install npm (node package manager) first. Then install project dependencies via 'npm install' and build the online version with 'gulp' or run this make script again after you installed npm and dependencies"

#
# Copy PDFs to public (move this and possibly other targets to gulp)
#
movePDF:
	-cp -R $(OUTPUT)/pdf public/
