# Builds the multi-language version
#
# This file is here for 2 reasons:
# 1. This could be implemented in Python, but in the present stage of development,
# it would be unwise to add the extra layer of complexity.
#
# 2. Some form of automation is necessary to setup the continuous integration server
#
# Caveats:
# * Remember to always use tabs instead of spaces!
# Specially when doing copy+paste, tabs will sometimes be replaced by spaces.
# Make will then throw a "missing separator" error.
# * This script should work on any Unix system, but the result should be cross-plattform,
# so specifically don't use softlinks (ln -s is bad).
#
# Using GNU Make, invoke as:
#
# cd <VEUNDMINT checkout path>
# make -f tools/makefiles/multilang
#

# The shared command definitions file
include tools/makefiles/command_definitions.make

.DEFAULT_GOAL := allTUB

# Path to source dir, relative to <VEUNDMINT checkout path>
BASEDIR = src

# Name of the output dir to be created
OUTPUT = build
SOURCE=content_submodule/content
# Language the index.html will point to by default,
# possible values: de, en
DEFAULT_LANG = de

# Declare as phony so targets will run even if there's a file by that name
.PHONY: cleanupBefore convert_with_pdf convert_without_pdf merge fixlinks fixredirects cleanupAfter all movePDF


#
# Build everything for the bootstrap version
# Including PDFs
#
allTUB: |cleanupBefore convert_with_pdf merge fixRedirects fix fixSpecialPages startGulp movePDF docs cleanupAfter
	echo "ready"


#
# Build everything for the bootstrap version
# WITHOUT PDFs
#
nopdf: |cleanupBefore convert_without_pdf merge fixRedirects fix fixSpecialPages startGulp docs cleanupAfter
	echo "ready"


#
# Build the English and the German version.
# including PDFs of whole course
#
convert_with_pdf:
	# set CURRENT_LANG at runtime.
	$(eval CURRENT_LANG := de)
	$(convert_cmd)
	$(pdf_cmd)
	$(eval CURRENT_LANG := en)
	$(convert_cmd)
	$(pdf_cmd)


#
# Build the English and the German version.
#
convert_without_pdf:
	# set CURRENT_LANG at runtime.
	$(eval CURRENT_LANG := de)
	$(convert_cmd)
	$(eval CURRENT_LANG := en)
	$(convert_cmd)


#
# Merge the 2 versions together.
#
merge:
	mv $(OUTPUT)_de $(OUTPUT)

	# move German HTML from /html to /html/de
	mv $(OUTPUT)/html $(OUTPUT)/de
	mkdir $(OUTPUT)/html
	mv $(OUTPUT)/de $(OUTPUT)/html

	# move English HTML to /html/en
	mv $(OUTPUT)_en/html $(OUTPUT)/html/en

	# move English PDF
	-mv $(OUTPUT)_en/pdf/* $(OUTPUT)/pdf/

	$(deploy_img_cmd)


#
# Copy redirect pages to each html/language directory
# Moved to its own target, to make sure it is done
# Before serach and replace starts in "fix" target.
#
fixRedirects:
	# set CURRENT_LANG to de
	$(eval CURRENT_LANG := de)
	$(fixRedirects_cmd)

	# set CURRENT_LANG to en
	$(eval CURRENT_LANG := en)
	$(fixRedirects_cmd)


#
# Move special pages to their definitive location
# this will overwrite some but not all redirect pages
#
fixSpecialPages:
	# set CURRENT_LANG to de
	$(eval CURRENT_LANG := de)
	$(fixSpecialPages_cmd)

	# set CURRENT_LANG to en
	$(eval CURRENT_LANG := en)
	$(fixSpecialPages_cmd)


#
# Fix the link paths in the HTML files
#
fix: fixRedirects
	# fix links to videos
	cd $(OUTPUT)/html && find . -name '*.html' -type f -exec sed -i "s|:localmaterial:|\.\./\.\./\.\./images|g" {} \;
	
	# set CURRENT_LANG to de
	$(eval CURRENT_LANG := de)
	$(fixLinks_cmd)

	# set CURRENT_LANG to en
	$(eval CURRENT_LANG := en)
	$(fixLinks_cmd)

	# replace index.html with src/templates_xslt/html5_choose_language_simple.html to allow for choosing en or de version
	cp src/templates_xslt/html5_choose_language_simple.html $(OUTPUT)/index.html


############################################################
#
#
# The following targets are in tools/makefiles/makefile
#
#
############################################################

useScormIndex:
	$(MAKE) -f tools/makefiles/makefile useScormIndex

cleanupBefore:
	$(MAKE) -f tools/makefiles/makefile cleanupBefore

cleanupAfter:
	$(MAKE) -f tools/makefiles/makefile cleanupAfter

startGulp:
	$(MAKE) -f tools/makefiles/makefile startGulp

movePDF:
	$(MAKE) -f tools/makefiles/makefile movePDF

docs:
	$(MAKE) -f tools/makefiles/makefile docs
